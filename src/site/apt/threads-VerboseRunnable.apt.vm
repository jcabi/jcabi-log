 ------
 Runnable That Logs Runtime Exceptions
 ------
 Yegor Bugayenko
 ------
 2012-12-16
 ------

~~
~~ Copyright (c) 2012-2021, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Runnable That Logs Runtime Exceptions

  You can use
  {{{./apidocs-${project.version}/com/jcabi/log/VerboseRunnable.html}<<<VerboseRunnable>>>}}:
  with scheduled executor, for example:

+--
public class Main {
  public static void main(String[] args) {
    Executors.newScheduledThreadPool(2).scheduleAtFixedRate(
      new VerboseRunnable(
        new Runnable() {
          @Override
          public void run() {
            // some operation that may lead to a runtime
            // exception, which we want to log through SLF4J
          }
        }
      ),
      1L, 1L, TimeUnit.SECONDS
    );
  }
}
+--

  Now, every runtime exception that is not caught inside your
  {{{http://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html}<<<Runnable>>>}}
  will be reported to log (using
  {{{./apidocs-${project.version}/com/jcabi/log/Logger.html}<<<Logger>>>}}).

  Two-arguments constructor can be used when you need to instruct the class
  about what to do with the exception: either swallow it or escalate.
  Sometimes it's very important to swallow exceptions. Otherwise an entire
  thread may get stuck (like in the example above).

  The only dependency you need is
  (you can also download
  {{{http://repo1.maven.org/maven2/com/jcabi/jcabi-log/${project.version}/jcabi-log-${project.version}.jar}<<<jcabi-log-${project.version}.jar>>>}}
  and add it to the classpath):

+--
<dependency>
  <groupId>com.jcabi</groupId>
  <artifactId>jcabi-log</artifactId>
  <version>${project.version}</version>
</dependency>
+--

